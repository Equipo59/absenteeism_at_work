name: Deploy MLflow to AWS ECS

# Deployment solo ocurre cuando se hace push a la rama 'web'
# master/main = desarrollo (sin deploy automático)
# web = producción (deploy automático a ECS Fargate)

on:
  push:
    branches:
      - web
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mlflow-tracking
  ECS_SERVICE: production-mlflow-tracking
  ECS_CLUSTER: production-mlflow-cluster
  ECS_TASK_DEFINITION: production-mlflow-tracking
  STACK_NAME: mlflow-infrastructure
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    name: Deploy MLflow to ECS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECS service-linked role if not exists
        run: |
          aws iam get-role --role-name AWSServiceRoleForECS 2>/dev/null || \
          aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.mlflow -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Get VPC and Subnet IDs from main infrastructure
        id: get-infra-ids
        run: |
          VPC_ID=$(aws cloudformation describe-stacks \
            --stack-name absenteeism-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`VPCId`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
          
          SUBNET1=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=production-public-subnet-1" "Name=vpc-id,Values=$VPC_ID" \
            --query 'Subnets[0].SubnetId' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "subnet1_id=$SUBNET1" >> $GITHUB_OUTPUT
          
          SUBNET2=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=production-public-subnet-2" "Name=vpc-id,Values=$VPC_ID" \
            --query 'Subnets[0].SubnetId' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "subnet2_id=$SUBNET2" >> $GITHUB_OUTPUT
          
          echo "VPC ID: $VPC_ID"
          echo "Subnet 1: $SUBNET1"
          echo "Subnet 2: $SUBNET2"

      - name: Create or update CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/mlflow-infrastructure.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              EnvironmentName=production \
              ContainerImage=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest \
              VPCId=${{ steps.get-infra-ids.outputs.vpc_id }} \
              PublicSubnet1Id=${{ steps.get-infra-ids.outputs.subnet1_id }} \
              PublicSubnet2Id=${{ steps.get-infra-ids.outputs.subnet2_id }} \
            --region ${{ env.AWS_REGION }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service stability
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Get ALB DNS
        id: get-alb-dns
        run: |
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "Load Balancer DNS: $ALB_DNS"

      - name: Health check
        run: |
          sleep 10
          ALB_DNS="${{ steps.get-alb-dns.outputs.alb_dns }}"
          curl -f http://$ALB_DNS/health || exit 1

      - name: Deployment summary
        run: |
          echo "✅ MLflow deployment completed successfully!"
          echo "🌐 MLflow URL: http://${{ steps.get-alb-dns.outputs.alb_dns }}"
          echo "📚 Tracking UI: http://${{ steps.get-alb-dns.outputs.alb_dns }}/"

