name: Deploy to AWS EC2

# Deployment solo ocurre cuando se hace push a la rama 'web'
# master/main = desarrollo (sin deploy automático)
# web = producción (con deploy automático)
#
# Requiere configurar GitHub Secrets:
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - AWS_ACCOUNT_ID
# - EC2_SSH_KEY
# - EC2_USER

on:
  push:
    branches:
      - web
  workflow_dispatch:  # Allows manual trigger from any branch

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_TYPE: t3.micro
  DOCKER_IMAGE_NAME: absenteeism-api

jobs:
  deploy:
    name: Build, Train, and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir -r requirements-api.txt || pip install --no-cache-dir fastapi uvicorn pydantic
          pip install --no-cache-dir boto3 awscli

      - name: Preprocess data
        run: |
          python -m absenteeism_at_work.preprocess_data

      - name: Train model
        run: |
          python -m absenteeism_at_work.modeling.train

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Setup infrastructure (Terraform)
        working-directory: infrastructure/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve || echo "Infrastructure may already exist, continuing..."
        continue-on-error: true

      - name: Clean up Docker system
        run: |
          docker system prune -af --volumes || true
          docker builder prune -af || true

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Clean up after build
        if: always()
        run: |
          docker system prune -af || true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        continue-on-error: true

      - name: Create ECR repository (if not exists)
        continue-on-error: true
        run: |
          aws ecr create-repository --repository-name ${{ env.DOCKER_IMAGE_NAME }} --region ${{ env.AWS_REGION }} || true

      - name: Push Docker image to ECR
        if: steps.login-ecr.outcome == 'success'
        continue-on-error: true
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Get EC2 instance IP
        id: get-ec2-ip
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=absenteeism-api" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "EC2 IP: $INSTANCE_IP"

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ec2-ip.outputs.instance_ip }} >> ~/.ssh/known_hosts || true

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r \
            . ${{ secrets.EC2_USER }}@${{ steps.get-ec2-ip.outputs.instance_ip }}:~/absenteeism_at_work/

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ steps.get-ec2-ip.outputs.instance_ip }} << 'EOF'
            cd ~/absenteeism_at_work
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh
          EOF

      - name: Health check
        run: |
          sleep 30
          INSTANCE_IP="${{ steps.get-ec2-ip.outputs.instance_ip }}"
          curl -f http://$INSTANCE_IP:8000/health || exit 1

      - name: Deployment summary
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 API URL: http://${{ steps.get-ec2-ip.outputs.instance_ip }}:8000"
          echo "📚 Docs: http://${{ steps.get-ec2-ip.outputs.instance_ip }}:8000/docs"
