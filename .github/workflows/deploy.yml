name: Deploy to AWS EC2

# Deployment solo ocurre cuando se hace push a la rama 'web'
# master/main = desarrollo (sin deploy autom√°tico)
# web = producci√≥n (con deploy autom√°tico)
#
# Requiere configurar GitHub Secrets:
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - AWS_ACCOUNT_ID
# - EC2_SSH_KEY
# - EC2_USER

on:
  push:
    branches:
      - web
  workflow_dispatch:  # Allows manual trigger from any branch

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_TYPE: t3.micro
  DOCKER_IMAGE_NAME: absenteeism-api

jobs:
  deploy:
    name: Build, Train, and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir -r requirements-api.txt || pip install --no-cache-dir fastapi uvicorn pydantic
          pip install --no-cache-dir boto3 awscli

      - name: Preprocess data
        run: |
          python -m absenteeism_at_work.preprocess_data

      - name: Train model
        run: |
          python -m absenteeism_at_work.modeling.train

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Setup infrastructure (Terraform)
        working-directory: infrastructure/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ec2_key_name: "absenteeism-key"
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_ec2_instance_type: ${{ env.EC2_INSTANCE_TYPE }}
        run: |
          terraform init
          # Check if instance exists and has correct key pair
          if terraform state list 2>/dev/null | grep -q "aws_instance.api"; then
            INSTANCE_ID=$(terraform state show aws_instance.api 2>/dev/null | grep '^id[[:space:]]*=' | sed 's/.*"\(.*\)".*/\1/' || echo "")
            if [ -n "$INSTANCE_ID" ] && [ "$INSTANCE_ID" != "null" ]; then
              CURRENT_KEY=$(aws ec2 describe-instances \
                --instance-ids "$INSTANCE_ID" \
                --region ${{ env.AWS_REGION }} \
                --query 'Reservations[0].Instances[0].KeyName' \
                --output text 2>/dev/null || echo "None")
              if [ "$CURRENT_KEY" != "absenteeism-key" ] && [ "$CURRENT_KEY" != "None" ] && [ "$CURRENT_KEY" != "null" ]; then
                echo "‚ö†Ô∏è  Instance has wrong key pair ($CURRENT_KEY), will recreate..."
                terraform taint aws_instance.api || true
              elif [ "$CURRENT_KEY" == "None" ] || [ -z "$CURRENT_KEY" ]; then
                echo "‚ö†Ô∏è  Instance has no key pair, will recreate..."
                terraform taint aws_instance.api || true
              fi
            fi
          fi
          terraform plan -out=tfplan -var="ec2_key_name=absenteeism-key" -var="aws_region=${{ env.AWS_REGION }}" -var="ec2_instance_type=${{ env.EC2_INSTANCE_TYPE }}"
          terraform apply -auto-approve -var="ec2_key_name=absenteeism-key" -var="aws_region=${{ env.AWS_REGION }}" -var="ec2_instance_type=${{ env.EC2_INSTANCE_TYPE }}" || echo "Infrastructure may already exist, continuing..."
        continue-on-error: true

      - name: Clean up Docker system
        run: |
          docker system prune -af --volumes || true
          docker builder prune -af || true

      - name: Build Docker image
        id: build-docker
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          echo "‚úÖ Docker image built successfully"
          docker images ${{ env.DOCKER_IMAGE_NAME }} --format "{{.Repository}}:{{.Tag}}" || echo "‚ö†Ô∏è Image listing failed"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        continue-on-error: true

      - name: Create ECR repository (if not exists)
        continue-on-error: true
        run: |
          aws ecr create-repository --repository-name ${{ env.DOCKER_IMAGE_NAME }} --region ${{ env.AWS_REGION }} || true

      - name: Push Docker image to ECR
        if: steps.login-ecr.outcome == 'success' && steps.build-docker.outcome == 'success'
        continue-on-error: true
        run: |
          # Verify image exists before tagging
          if ! docker images ${{ env.DOCKER_IMAGE_NAME }}:latest --format "{{.Repository}}:{{.Tag}}" | grep -q "${{ env.DOCKER_IMAGE_NAME }}:latest"; then
            echo "‚ùå Docker image ${{ env.DOCKER_IMAGE_NAME }}:latest not found"
            echo "Available images:"
            docker images | head -10
            exit 1
          fi
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Clean up Docker after push
        if: always()
        run: |
          docker system prune -af || true

      - name: Get EC2 instance IP
        id: get-ec2-ip
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=absenteeism-api" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "EC2 IP: $INSTANCE_IP"

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Write SSH key - preserve newlines from GitHub Secrets
          # Use printf to handle newlines properly
          printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Verify SSH key format
          if [ ! -s ~/.ssh/id_rsa ]; then
            echo "‚ùå SSH key file is empty"
            exit 1
          fi
          if ! head -1 ~/.ssh/id_rsa | grep -qE "(BEGIN|PRIVATE)"; then
            echo "‚ùå SSH key format invalid"
            echo "First line: $(head -1 ~/.ssh/id_rsa)"
            echo "Key length: $(wc -l < ~/.ssh/id_rsa) lines"
            exit 1
          fi
          # Add EC2 to known_hosts
          ssh-keyscan -H ${{ steps.get-ec2-ip.outputs.instance_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true
          # Test SSH connection with verbose output for debugging
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ steps.get-ec2-ip.outputs.instance_ip }} "echo 'SSH connection test successful'" || {
            echo "‚ö†Ô∏è SSH test failed"
            echo "Troubleshooting:"
            echo "  - Key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
            echo "  - Key first line: $(head -1 ~/.ssh/id_rsa)"
            echo "  - Key last line: $(tail -1 ~/.ssh/id_rsa)"
            exit 1
          }

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa -r \
            . ${{ secrets.EC2_USER }}@${{ steps.get-ec2-ip.outputs.instance_ip }}:~/absenteeism_at_work/

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ steps.get-ec2-ip.outputs.instance_ip }} << 'EOF'
            cd ~/absenteeism_at_work
            chmod +x scripts/deploy.sh
            export DEPLOYMENT_MODE=local
            ./scripts/deploy.sh
          EOF

      - name: Health check
        run: |
          sleep 30
          INSTANCE_IP="${{ steps.get-ec2-ip.outputs.instance_ip }}"
          curl -f http://$INSTANCE_IP:8000/health || exit 1

      - name: Deployment summary
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê API URL: http://${{ steps.get-ec2-ip.outputs.instance_ip }}:8000"
          echo "üìö Docs: http://${{ steps.get-ec2-ip.outputs.instance_ip }}:8000/docs"
