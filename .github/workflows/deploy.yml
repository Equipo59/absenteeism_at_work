name: Deploy to AWS ECS

# Deployment solo ocurre cuando se hace push a la rama 'web'
# master/main = desarrollo (sin deploy automático)
# web = producción (deploy automático a ECS Fargate)

on:
  push:
    branches:
      - web
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: absenteeism-api
  ECS_SERVICE: production-absenteeism-api
  ECS_CLUSTER: production-absenteeism-cluster
  ECS_TASK_DEFINITION: absenteeism-api
  STACK_NAME: absenteeism-infrastructure
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preprocess data
        run: python -m absenteeism_at_work.preprocess_data

      - name: Train model
        run: python -m absenteeism_at_work.modeling.train

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECS service-linked role if not exists
        run: |
          aws iam get-role --role-name AWSServiceRoleForECS 2>/dev/null || \
          aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Create or update CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/infrastructure.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              EnvironmentName=production \
              ContainerImage=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest \
            --region ${{ env.AWS_REGION }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service stability
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Get ALB DNS
        id: get-alb-dns
        run: |
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "Load Balancer DNS: $ALB_DNS"

      - name: Health check
        run: |
          sleep 10
          ALB_DNS="${{ steps.get-alb-dns.outputs.alb_dns }}"
          curl -f http://$ALB_DNS/health || exit 1

      - name: Deployment summary
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 API URL: http://${{ steps.get-alb-dns.outputs.alb_dns }}"
          echo "📚 Docs: http://${{ steps.get-alb-dns.outputs.alb_dns }}/docs"
