AWSTemplateFormatVersion: '2010-09-09'
Description: 'MLflow Tracking Server Infrastructure - ECS Fargate with Application Load Balancer'

Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: Environment name
  
  ContainerImage:
    Type: String
    Default: mlflow-tracking:latest
    Description: Container image to deploy
  
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where resources will be deployed

  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: First public subnet ID
  
  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id
    Description: Second public subnet ID

Resources:
  # Security Group for ALB
  MLflowALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MLflow Application Load Balancer
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from internet
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
          Description: MLflow from internet
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-mlflow-alb-sg'

  # Security Group for ECS Tasks
  MLflowECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MLflow ECS tasks
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref MLflowALBSecurityGroup
          Description: Allow traffic from ALB
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-mlflow-ecs-task-sg'

  # ECS Cluster
  MLflowECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${EnvironmentName}-mlflow-cluster'
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Execution Role
  MLflowECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # ECS Task Role
  MLflowECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # CloudWatch Log Group
  MLflowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${EnvironmentName}-mlflow-tracking'
      RetentionInDays: 7

  # ECS Task Definition
  MLflowTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${EnvironmentName}-mlflow-tracking'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt MLflowECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MLflowECSTaskRole.Arn
      ContainerDefinitions:
        - Name: mlflow
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MLflowLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - wget --quiet --tries=1 --spider http://localhost:5000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 10

  # Application Load Balancer
  MLflowLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${EnvironmentName}-mlflow-alb'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref MLflowALBSecurityGroup

  # Target Group
  MLflowTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${EnvironmentName}-mlflow-tg'
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200

  # Listener
  MLflowListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MLflowLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MLflowTargetGroup

  # ECS Service
  MLflowECSService:
    Type: AWS::ECS::Service
    DependsOn: MLflowListener
    Properties:
      ServiceName: !Sub '${EnvironmentName}-mlflow-tracking'
      Cluster: !Ref MLflowECSCluster
      TaskDefinition: !Ref MLflowTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1Id
            - !Ref PublicSubnet2Id
          SecurityGroups:
            - !Ref MLflowECSTaskSecurityGroup
      LoadBalancers:
        - ContainerName: mlflow
          ContainerPort: 5000
          TargetGroupArn: !Ref MLflowTargetGroup

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the MLflow load balancer
    Value: !GetAtt MLflowLoadBalancer.DNSName
    Export:
      Name: !Sub '${EnvironmentName}-mlflow-alb-dns'

  ClusterName:
    Description: Name of the MLflow ECS cluster
    Value: !Ref MLflowECSCluster
    Export:
      Name: !Sub '${EnvironmentName}-mlflow-cluster-name'

  ServiceName:
    Description: Name of the MLflow ECS service
    Value: !Ref MLflowECSService
    Export:
      Name: !Sub '${EnvironmentName}-mlflow-service-name'

